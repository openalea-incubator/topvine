from openalea.plantgl.all import * 
import random
import IOtable
import cPickle as pickle
from numpy import array, cos, sin, exp

def leaf0(l=1.):
    points= Point3Array([ Vector3(0,9.8,0),Vector3(3.7,6.3,0),Vector3(2.3,3.9,0), 
                          Vector3(5.4,6.2,0), Vector3(5.9,3.2,0),Vector3(4.6,0.1,0),
                          Vector3(6.4,-1.6,0), Vector3(1,-3.7,0), Vector3(0,0,0),                     
                          Vector3(-1,-3.7,0),Vector3(-6.4,-1.6,0), 
                          Vector3(-4.6,0.1,0), Vector3(-5.9,3.2,0),                        
                          Vector3(-5.4,6.2,0), Vector3(-2.3,3.9,0),Vector3(-3.7,6.3,0)]) 
    
    indices= Index3Array([ Index3(0,1,8), Index3(15,0,8), Index3(8,11,14), 
                           Index3(11,12,14), Index3(12,13,14),Index3(10,11,8),                      
                           Index3(8,9,10), Index3(2,3,4),Index3(2,4,5), 
                           Index3(2,5,8), Index3(8,5,6),Index3(8,6,7)])
    
    f= TriangleSet(points, indices)
    return Scaled (Vector3(0.01*l,0.01*l,0.01*l), f)



def transformation( obj, sx, sy, sz, rx, ry, rz, tx, ty, tz ): 
    """ Return an object scaled, rotated and translated """ 
    vs = Vector3(sx,sy,sz)
    s_obj = Scaled (vs, obj)
    r_obj = EulerRotated (rx, ry, rz, s_obj)
    vt = Vector3(tx,ty,tz)
    t_obj = Translated (vt, r_obj)
    return t_obj



def long_f(age):
    return 1#1/(1+exp(-0.03*(age-100)))

def long_en(lenmax, age):
    duree_exp = 1#100.
    if age<duree_exp:
        return age/duree_exp*lenmax
    else:
        return lenmax

def angle(age):
    """ ouverture des folioles en fonction de TT """
    a = 1/(1+exp(-0.03*(age-50)))
    return 90-90*a
    

def read_ord(ordre, posax, topo):
    """ renvoie info phytomere definit par ordre """
    if ordre['Ordre'] == 1:
        return topo[ordre['Tige']][posax][0]
    elif ordre['Ordre'] == 2:
        return topo[ordre['Tige']][ordre['R1']][1][posax][0]
    elif ordre['Ordre'] == 3:
        return topo[ordre['Tige']][ordre['R1']][1][ordre['R2']][1][posax][0]


def apex_proba(ordre, idp):
    """ proba = 1 si donne un axe, zero sinon"""
    p, n = 0,0
    if ordre['Ordre']==1:
        if ordre['Tige']<len(topo[idp]):#tige existe
            p, n = 1, len(topo[idp][ordre['Tige']])
    elif ordre['Ordre']==2:
        if len(topo[idp][ordre['Tige']][ordre['R1']])>1:#si porte ramif
            p, n = 1, len(topo[idp][ordre['Tige']][ordre['R1']][1])
    elif ordre['Ordre']==3:
        if len(topo[idp][ordre['Tige']][ordre['R1']][1][ordre['R2']])>1:#si porte ramif
            p, n = 1, len(topo[idp][ordre['Tige']][ordre['R1']][1][ordre['R2']][1])
    
    return p, n




timestep = 5
TT = 0#-timestep#0.
phyllochrone = 40.
len_ = 1.
TTfin = 800.

#devrait lire en plus un fichier de carto pour positionnement des troncs
#distance a phytomere pas pris en compte dans apparition des phytomere des ramifs

f = file(r'H:\devel\topvine\topvine\data\test_geom_n.dat', 'r')
table = pickle.load(f)
f.close()


f = file(r'H:\devel\topvine\topvine\data\test_vine_n.dat', 'r')
topo = pickle.load(f)
f.close()

nb_pl = len(topo)

n0 = []#nb plantes len(n0); nb phyto par tige principale / nb de tige = len(n0[i])
for i in range (nb_pl):
    v = []
    for j in range (len(topo[i])):
        v.append(len(topo[i][j]))
    
    n0.append(v)


STEPS = TTfin/timestep


module canopy(nb_plantes) : scale = 0
module tronc(x, y, z) : scale = 1
module plante(x, y, z, azim, nb_tiges, idp) : scale = 1
module branch(opt) : scale = 1
module lf(l, larg, age, ordre, posax, azi, incli, idp) : scale = 2
module pet(l, age, ordre, posax, azi, incli, idp): scale = 2
module en(l, age, ordre, posax, azi, incli, idp) : scale = 2
module A(ordre, param, age,n, idp) : scale = 2

Axiom: canopy(nb_pl)

def Start():
    useGroup(1)

def EndEach():
    if getGroup()==1:
        useGroup(2)
    elif getGroup()==2:
        useGroup(3)

def StartEach():
    global TT
    if getGroup()==3:
        TT=TT+timestep



derivation length: int(STEPS)+2
production:

group 1:

canopy(nb_plantes):
    for i in range(nb_plantes):
        nproduce tronc(i*1.1,0,0)plante(0., 0., 0., 0. , len(n0[i]), i)


endgroup



group 2:

plante(x, y, z, azim, nb_tiges, idp):
    for i in range(nb_tiges):
        #print table[i][1]
        nproduce plante(table[idp][i][1][0]/100., table[idp][i][1][1]/100., table[idp][i][1][2]/100., azim, nb_tiges-1, idp)branch(1)A({'Ordre':1, 'Tige':i, 'R1':None, 'R2':None}, {'proba':1, 'delai':0., 'V':phyllochrone , 'D':phyllochrone+phyllochrone*n0[idp][i]},0,0, idp)branch(0)


endgroup

group 3:

A(ordre, param, age, n,idp):
    if param['proba'] ==1 :
      if age<(param['V'] + param['delai'] - timestep) :#phyllochrone + delai
          produce A(ordre, param, age+timestep, n,idp)
      else:
          if TT >= param['D']:#arret apex 
            produce A(ordre, param, age+timestep, n,idp)
          else:
            #remet a zero age apex
            newage = age - param['V'] + timestep #revient a delai; mettre zero si remet aussi param['delai'] = 0.
            #recupere geometrie
            par_phyto = read_ord(ordre, n, topo[idp])
            azi_en, incli_en, azi_pet, incli_pet  = par_phyto[1],par_phyto[2], par_phyto[4],par_phyto[5]
            lmax_f, largmax_f, incli_f, azi_f = par_phyto[6], par_phyto[7], par_phyto[9], par_phyto[8]
            #definit ordre apex lateral
            if ordre['Ordre']==1:
              r1, r2 = n, None
            elif ordre['Ordre']==2:
              r1, r2 = ordre['R1'],n
            else:
              r1, r2 = ordre['R1'], ordre['R2']
            
            newordre = {'Ordre':ordre['Ordre']+1, 'Tige':ordre['Tige'], 'R1':r1, 'R2':r2}#bourgeon lateral
            #param['delai'] = 0.#bourgeon apical
            
            #parametres coordonnat la dynamique de developpement de l'axe lateral
            p, nb = apex_proba(newordre, idp)
            deldeb = param['V']*2.#300.#TT + timestep +30 #depart immediat #apex_delai(newordre, param['V'])
            Phyl2 = 1.25*param['V']#Dur/(max(float(nb), 0.00001))#phyllochrone
            Dur = TT + deldeb + nb*Phyl2 + timestep
            
            print ordre, newordre, n, TT, TT+deldeb
            
            produce en(0,newage,ordre, n,azi_en, incli_en, idp)branch(1)A(newordre,{'proba':p, 'delai':deldeb, 'V':Phyl2 , 'D':Dur}, 0, 0, idp)branch(0)branch(1)pet(0,newage,ordre, n, azi_pet, incli_pet, idp)lf(lmax_f*long_f(newage), largmax_f, newage, ordre, n, azi_f, incli_f-90, idp)branch(0)A(ordre, param,newage, n+1, idp)





pet(l, age, ordre, posax, azi, incli,idp) --> pet(long_en(read_ord(ordre, posax, topo[idp])[3], age+timestep),age+timestep, ordre, posax, azi, incli,idp)
en(l, age, ordre, posax, azi, incli,idp) --> en(long_en(read_ord(ordre, posax, topo[idp])[0], age+timestep),age+timestep, ordre, posax, azi, incli, idp)
lf(l, larg, age, ordre, posax, azi, incli,idp) --> lf(read_ord(ordre, posax, topo[idp])[6]*long_f(age+timestep), larg,  age+timestep, ordre, posax, azi, incli,idp)
#lf(l, larg, age, ordre, posax, azi, incli) --> lf(read_ord(ordre, posax, topo)[6]*long_f(age+timestep), larg,  age+timestep, ordre, posax, azi, angle(age+timestep))


endgroup

homomorphism:
tronc(x,y,z) --> @R(0,0,1, 1,0,0)@M(x,y,z)_(0.03)F(0.6)&(90)F(0.53)&(180)F(1.06)

plante(x,y,z,azim,nb_tiges,idp) --> @M(x,y,z)/(azim)

branch(opt):
    if opt==1:
        produce [
    else:
        produce ]

en(l, age, ordre, posax, azi, incli,idp) :
    a1, a2 = azi, incli
    if a1>0. and a2>0:
        produce _(0.002)@R(0,0,1, 1,0,0)/(a1)^(a2)F(l)
    elif a1>0. and a2<0:
        produce _(0.002)@R(0,0,1, 1,0,0)/(a1)&(-a2)F(l)
    elif a1<0. and a2>0:
        produce _(0.002)@R(0,0,1, 1,0,0)\(-a1)^(a2)F(l)
    elif a1<0. and a2<0:
        produce _(0.002)@R(0,0,1, 1,0,0)\(-a1)&(-a2)F(l)

pet(l, age, ordre, posax, azi, incli,idp) :
    a1, a2 = azi, incli
    if l>0:
      if a1>0. and a2>0:
         produce _(0.0005)@R(0,0,1, 1,0,0)/(a1)^(a2)f(l)
      elif a1>0. and a2<0:
         produce _(0.0005)@R(0,0,1, 1,0,0)/(a1)&(-a2)f(l)
      elif a1<0. and a2>0:
         produce _(0.0005)@R(0,0,1, 1,0,0)\(-a1)^(a2)f(l)
      elif a1<0. and a2<0:
         produce _(0.0005)@R(0,0,1, 1,0,0)\(-a1)&(-a2)f(l)
    else:
         produce *

lf(l, larg, age, ordre, posax, azi, incli,idp) :
    if l>0:
        produce ;(2)@R(0,0,1, 1,0,0)/(azi)@g(transformation(leaf0(),l*10,l*10,1, 0 ,0, incli*3.14/180, 0, 0, 0))
    else:
        produce *

A(ordre, param, age, n,idp) --> *#@O(0.1)#

endlsystem

###### INITIALISATION ######

def __initialiseContext__(context):
	from openalea.plantgl.all import Material,Color3
	context.turtle.setMaterial(2,Material('Green',Color3(33,66,11),3.25758,Color3(40,40,40),Color3(0,0,0),1,0))
